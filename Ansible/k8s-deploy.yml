- hosts: localhost
  connection: local
  gather_facts: yes
  vars:
    image_name: "depi-shop:latest"
    host_port: 80
  tasks:
    - name: Check if minikube is installed
      command: which minikube
      register: minikube_installed
      ignore_errors: yes
      
    - name: Display minikube status
      debug:
        msg: "Minikube is installed"
      when: minikube_installed.rc == 0
      
    - name: Check minikube status
      command: minikube status
      register: minikube_status
      ignore_errors: yes
      when: minikube_installed.rc == 0
      
    - name: Display minikube status
      debug:
        var: minikube_status
      when: minikube_installed.rc == 0
      
    - name: Start minikube if not running
      command: minikube start
      register: minikube_start
      when: minikube_installed.rc == 0 and (minikube_status.rc != 0 or "host Stopped" in minikube_status.stdout)
      ignore_errors: yes
      
    - name: Display minikube start results
      debug:
        var: minikube_start
      when: minikube_start is defined and minikube_start.changed
      
    - name: Wait for minikube to initialize (30 seconds)
      wait_for:
        timeout: 30
      when: minikube_start is defined and minikube_start.changed

    - name: Check Kubernetes connectivity
      command: kubectl cluster-info
      register: cluster_info
      ignore_errors: yes
      
    - name: Display cluster info if successful
      debug:
        msg: "{{ cluster_info.stdout_lines }}"
      when: cluster_info.rc == 0

    - name: Display error message if connectivity fails
      debug:
        msg: "Failed to connect to Kubernetes cluster. Check connectivity and cluster status."
      when: cluster_info.rc != 0

    - name: Check if Docker is running
      command: systemctl status docker
      register: docker_status
      ignore_errors: yes

    - name: List available Docker images
      command: docker images
      register: docker_images
      ignore_errors: yes

    - name: Display available Docker images
      debug:
        var: docker_images.stdout_lines
      when: docker_images is defined

    # Ensure minikube can access the Docker image using these alternative methods
    - name: Method 1 - Load image directly into minikube
      command: minikube image load {{ image_name }}
      register: image_load_result
      ignore_errors: yes
      when: cluster_info.rc == 0

    - name: Display image loading result
      debug:
        var: image_load_result
      when: image_load_result is defined
      
    - name: Method 2 - Configure to use minikube Docker daemon
      shell: eval $(minikube docker-env) && docker build -t {{ image_name }} {{ ansible_env.HOME }}/docker/depi-shop
      ignore_errors: yes
      when: cluster_info.rc == 0 and (image_load_result.rc != 0 or image_load_result is not defined)
      register: minikube_docker_build
      
    - name: Display minikube docker build result
      debug:
        var: minikube_docker_build
      when: minikube_docker_build is defined

    # Update the deployment YAML to use imagePullPolicy: Never
    - name: Create a temp file with modified deployment
      copy:
        dest: ../K8S/temp-deployment.yml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mylab1-cafe-app
            labels:
              app: cafe-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: cafe-app
            template:
              metadata:
                labels:
                  app: cafe-app
              spec:
                containers:
                - name: cafe-app
                  image: {{ image_name }}
                  imagePullPolicy: Never
                  ports:
                  - containerPort: 80
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 1

    # Kubernetes Deployment tasks - only run if cluster is available
    - name: deploy cafeapp on kubernetes with modified deployment
      command: kubectl apply -f temp-deployment.yml --validate=false
      args:
        chdir: ../K8S
      register: deployment_result
      ignore_errors: yes
      when: cluster_info.rc == 0

    - name: Debug deployment result
      debug:
        var: deployment_result
      when: cluster_info.rc == 0
      
    - name: create service for cafeapp
      command: kubectl apply -f cafe-app-svc.yml --validate=false
      args:
        chdir: ../K8S
      register: service_result
      ignore_errors: yes
      when: cluster_info.rc == 0

    - name: Debug service result
      debug:
        var: service_result
      when: cluster_info.rc == 0

    - name: Update deployment with new pods if image updated in docker hub
      command: kubectl rollout restart deployment.apps/mylab1-cafe-app
      ignore_errors: yes
      when: cluster_info.rc == 0 and deployment_result.rc == 0

    - name: Wait for pods to be ready (60 seconds)
      shell: |
        start_time=$(date +%s)
        while [ $(($(date +%s) - start_time)) -lt 60 ]; do
          status=$(kubectl get pods -l app=cafe-app -o jsonpath='{.items[*].status.phase}')
          if [[ "$status" == *"Running"* ]]; then
            echo "Pods are running"
            exit 0
          fi
          echo "Waiting for pods... Current status: $(kubectl get pods)"
          sleep 5
        done
        echo "Timeout waiting for pods to be ready"
        exit 1
      register: pod_wait_result
      ignore_errors: yes
      when: cluster_info.rc == 0 and deployment_result.rc == 0

    - name: Show pod details if there are issues
      command: kubectl describe pods -l app=cafe-app
      register: pod_details
      when: cluster_info.rc == 0
      ignore_errors: yes
      
    - name: Display pod details
      debug:
        var: pod_details.stdout_lines
      when: pod_details is defined
      
    - name: Get service URL from minikube
      command: minikube service mylab1-service --url
      register: service_url
      ignore_errors: yes
      when: cluster_info.rc == 0 and service_result.rc == 0
      
    - name: Display service URL
      debug:
        var: service_url
      when: service_url is defined
      
    # New tasks for exposing the service to the public
    - name: Get minikube IP
      command: minikube ip
      register: minikube_ip
      when: cluster_info.rc == 0
      ignore_errors: yes
      
    - name: Get NodePort of the service
      shell: kubectl get service mylab1-service -o jsonpath='{.spec.ports[0].nodePort}'
      register: node_port
      when: cluster_info.rc == 0
      ignore_errors: yes
      
    - name: Display minikube IP and NodePort
      debug:
        msg: "Minikube IP: {{ minikube_ip.stdout }}, NodePort: {{ node_port.stdout }}"
      when: minikube_ip is defined and node_port is defined and minikube_ip.rc == 0 and node_port.rc == 0
      
    - name: Check if socat is installed
      command: which socat
      register: socat_installed
      ignore_errors: yes
      
    - name: Install socat if not present
      apt:
        name: socat
        state: present
      become: yes
      when: socat_installed.rc != 0
      ignore_errors: yes
      
    - name: Stop any existing socat processes
      shell: pkill -f "socat.*{{ host_port }}" || true
      ignore_errors: yes
      
    - name: Set up port forwarding with socat (in background)
      shell: nohup socat TCP-LISTEN:{{ host_port }},fork,reuseaddr TCP:{{ minikube_ip.stdout }}:{{ node_port.stdout }} > /tmp/socat.log 2>&1 &
      when: minikube_ip is defined and node_port is defined and minikube_ip.rc == 0 and node_port.rc == 0
      ignore_errors: yes
      async: 10
      poll: 0
      
    - name: Get public IP of the host
      shell: curl -s http://checkip.amazonaws.com || curl -s https://api.ipify.org || echo "Could not determine public IP"
      register: public_ip
      ignore_errors: yes
      
    - name: Display access information
      debug:
        msg: "Your application should be accessible at http://{{ public_ip.stdout }}:{{ host_port }}"
      when: public_ip is defined

